{
	"div": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "div",
		"body": [
			"<div className=\"$TM_FILENAME_BASE-$1\">$2</div>"
		],
		"description": "Inserts a div component with className prepopulated"
	},
	"cn": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "cn",
		"body": [
			"className=\"$TM_FILENAME_BASE-$0\""
		],
		"description": "Inserts a className attribute with the filename prepopulated"
	},
	"tp": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "tp",
		"body": [
			"const { $0 } = this.props;"
		],
		"description": "Inserts this.props"
	},
	"ts": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "ts",
		"body": [
			"const { $0 } = this.state;"
		],
		"description": "Inserts this.state"
	},
	"cpt": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "cpt",
		"body": [
			"static propTypes = {$0}"
		],
		"description": "Creates static propTypes = {} for class based component"
	},
	"fpt": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "fpt",
		"body": [
			"$TM_FILENAME_BASE.propTypes = {$0}"
		],
		"description": "Creates static propTypes = {} for class based component"
	},
	"rfc": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "rfc",
		"body": [
			"import React from 'react';",
			"import classNames from 'classnames';",
			"import assert from 'assert'",
			"import PropTypes from 'prop-types';",
			"",
			"import \"./$TM_FILENAME_BASE.css\";",
			"",
			"$TM_FILENAME_BASE.propTypes = {$1}",
			"",
			"function $TM_FILENAME_BASE({ className, $2 }) {",
			"\treturn(",
			"\t\t<div className={classNames(\"$TM_FILENAME_BASE\", className)}>",
			"\t\t\t$3",
			"\t\t</div>",
			"\t);",
			"}",
			"",
			"export default $TM_FILENAME_BASE;"
		],
		"description": "Creates functional component with default parameters"
	},
	"rcc": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "rcc",
		"body": [
			"import React, { Component } from 'react';",
			"import classNames from 'classnames';",
			"import assert from 'assert'",
			"import PropTypes from 'prop-types';",
			"",
			"import \"$TM_FILENAME_BASE.css\";",
			"",
			"class $TM_FILENAME_BASE extends Component {",
			"\tstatic propTypes = {$1}",
			"",
			"\trender() {",
			"\t\t",
			"\t\tconst { className } = this.props;",
			"\t\t",
			"\t\treturn(",
			"\t\t\t<div className={classNames(\"$TM_FILENAME_BASE\", className)}>",
			"\t\t\t\t$2",
			"\t\t\t</div>",
			"\t\t);",
			"\t}",
			"}",
			"",
			"export default $TM_FILENAME_BASE;"
		],
		"description": "Creates class component with default parameters"
	},
	"ast": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "ast",
		"body": [
			"assert($1, '$1 is required');"
		]
	},
	"asne": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "asne",
		"body": [
			"assert.notStrictEqual($1, $2, 'Expected $1 to not equal $2');"
		]
	},
	"us": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "us",
		"body": [
			"const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"
		]
	},
	"uc": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "uc",
		"body": [
			"const {$1} = useContext($2Context);"
		]
	},
	"um": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "um",
		"body": [
			"const $1 = useMemo(() => $2, [$3]);"
		]
	},
	"ucb": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "ucb",
		"body": [
			"const $1 = useCallback(($2) => {",
			"\t$3",
			"}, [$4]);"
		]
	},
	"frag": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "frag",
		"body": [
			"<React.Fragment>",
			"\t$0",
			"</React.Fragment>"
		]
	}
}